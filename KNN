import pandas as pd

#read in the data using pandas
df = pd.read_csv('spambase.data', sep=",")

#check data has been read in properly
df.head()

#check the number of rows and columns in the dataset
df.shape

#create a dataframe with all training data 
X = df.drop(columns=['1'])

#check that the target variable has been removed
X.head()

#separate target values
y = df['1'].values

#view target values
y[0:5]

from sklearn.model_selection import train_test_split
#split dataset into train and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1)

from sklearn.neighbors import KNeighborsClassifier

# Create KNN classifier
knn = KNeighborsClassifier(n_neighbors = 3)

# Fit the classifier to the data
knn.fit(X_train,y_train)

#Show first 5 model predictions on the test data
y_pred = knn.predict(X_test)
y_pred[0:5]

#check accuracy of our model on the test data
knn.score(X_test, y_test)

from sklearn.model_selection import cross_val_score
import numpy as np

#create a new KNN model
knn_cv = KNeighborsClassifier(n_neighbors=3)

#train model with cv of 5 
cv_scores = cross_val_score(knn_cv, X, y, cv=5)

#print each cv score (accuracy) and average them
print(cv_scores)
print('cv_scores mean:{}'.format(np.mean(cv_scores)))

from sklearn.model_selection import GridSearchCV

#create new a knn model
knn2 = KNeighborsClassifier()

#create a dictionary of all values we want to test for n_neighbors
param_grid = {'n_neighbors': np.arange(1, 25)}

#Use gridsearch to test all values for n_neighbors
knn_gscv = GridSearchCV(knn2, param_grid, cv = 10, scoring = 'accuracy', return_train_score = False, verbose = 1) 

#fit model to data
knn_gscv.fit(X, y)

#check top performing n_neighbors value
knn_gscv.best_params_

#check mean score for the top performing value of n_neighbors
knn_gscv.best_score_
